-- MCM Builder: Objection!

-- Imports

local Tree = mcm_builder.Tree
local Page = mcm_builder.Page

-- Implementation

--- Modify Tree's constructor to copy its ID into a new path member,
--- and store an optional `collection` ID for injection into other menus
Tree.new = function (id, collection)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {
      id = id,
      path = {id},
      col = collection,
      sh = false,
      gr = {}
   }
   setmetatable(t, {__index = Tree})
   return t
end

--- Extend Tree with a setter for the new collection ID field;
--- if non-nil when `build` is called, the collection will be
--- returned as its second value.
--- If passed directly back to MCM, this will cause it to
--- attach the resulting tree to an existing one with the given ID
--- instead of creating a new root menu entry.
Tree.collection = function(self, collection)
   assert(type(collection) == "string", "MCM Builder: no collection given")
   self.collection = collection
   return self
end

--- Extend Tree with a smart page constructor
--- Variadic on both input and output for ergonomic multi-binding
Tree.pages = function(self, ...)
   local ids = {...}
   local out = {}

   for i,id in ipairs(ids) do
      assert(id, string.format("Invalid page ID at index %s", i))
      local page = Page.new(id)
      self:add_page(page)
      page.path = {}
      copy_table(page.path, self.path)
      table.insert(page.path, id)
      table.insert(out, page)
   end

   ---Avoid spurious LSP complaints about x-ray's extended Lua 5.1
   ---@diagnostic disable-next-line: deprecated
   return unpack(out)
end

--- Extend Tree with a smart tree constructor
--- Variadic on both input and output for ergonomic multi-binding
Tree.subtrees = function(self, ...)
   local ids = {...}
   local out = {}

   for i,id in ipairs(ids) do
      assert(id, string.format("Invalid tree ID at index %s", i))
      local tree = Tree.new(id)
      self:add_subtree(tree)
      tree.path = {}
      copy_table(tree.path, self.path)
      table.insert(tree.path, tree.id)
      table.insert(out, tree)
   end

   ---Avoid spurious LSP complaints about x-ray's extended Lua 5.1
   ---@diagnostic disable-next-line: deprecated
   return unpack(out)
end

--- Extend Page with a smart setting constructor
--- Also variadic on both input and output, for ergonomic multi-binding
Page.settings = function(self, ...)
   local settings = {...}
   local out = {}
   for i,setting in ipairs(settings) do
      assert(setting, string.format("Invalid setting at index %s", i))
      self:add(setting)
      setting.path = {}
      copy_table(setting.path, self.path)
      table.insert(setting.path, setting.id)
      table.insert(out, setting)
   end

   ---Avoid spurious LSP complaints about x-ray's extended Lua 5.1
   ---@diagnostic disable-next-line: deprecated
   return unpack(out)
end

--- Define a container for generalized MCM getters and setters
local AbstractLens = {
   key = function(self)
      return table.concat(self.path, "/")
   end,

   get = function(self, d)
      local out = nil

      if ui_mcm then
         out = ui_mcm.get(self:key())
      end

      if out == nil and d then
         out = d(self.path)
      end

      if out == nil then
         out = self.def
      end

      return out
   end,

   set = function(self, v)
      if ui_mcm then
         ui_mcm.set(self:key(), v)
      end
   end,
}

--- Getter fallback for retrieving defaults
--- from a table with comparable structure.
---
--- Not actually that useful in light of controls storing
--- their own defaults and being able to fall back on those,
--- but included for didactic purposes.
--- (And because default tables are a common pattern.)
---
---@param tbl table
---@return fun(path: table): any
mcm_builder.default_table = function(tbl)
   return function(path)
      local focus = tbl
      for i,k in ipairs(path) do
         focus = focus[k]
         assert(focus ~= nil, string.format("Invalid key at index %s: %s", i, k))
      end
      return focus
   end
end

--- Extend valued controls with our new methods
copy_table(mcm_builder.Checkbox, AbstractLens)
copy_table(mcm_builder.List, AbstractLens)
copy_table(mcm_builder.InputField, AbstractLens)
copy_table(mcm_builder.RadioBox, AbstractLens)
copy_table(mcm_builder.Trackbar, AbstractLens)
copy_table(mcm_builder.KeybindBox, AbstractLens)

--- Modify the build function to operate by value
--- so our original interface objects don't get destroyed
Tree.build = function(self)
   -- Create a copy of our table minus OOP features and builder data
   local out = {}
   copy_table(out, self)
   out._subtree = nil

   -- Recurse on table children
   for _, v in pairs(self) do
      if type(v) == "table" then
         Tree.build(v)
      end
   end

   -- Done, return both the resulting struct
   -- and any collection ID that may be set on the tree
   return out, self.col
end

--[[
This lets MCM builder primitives act as object-oriented
cross-module interfaces to their respective settings,
allowing definition and access to be localized in scripts where
they're most relevant, rather than a single monolithic MCM sin-bin.

For example:

-- The root tree would likely live in `my_mod_mcm.script`:
local tree = Tree.new("TotallyTubular")

-- Subsystems in other scripts
-- (which must themselves have an `_mcm` suffix for proper load behaviour)
-- are free to fetch a reference to it and define new child elements:
local page = tree:pages("Stuff")

-- Likewise, code downstream of page creators is also free
-- to fetch and populate via reference:
local gubbin = page:settings(Checkbox.new("Gubbin"):default(false))

-- Trees can also nest one level within other trees:
local nest_tree = tree:subtrees("Things")
local nest_page = nest_tree:pages("Stuff")

-- The `trees`, `pages` and `settings` functions are variadic
-- in both input and output for more ergonomic definition:
local foo, bar = page:settings(
   Checkbox.new("Foo"):default(true),
   Trackbar.new("Bar"):default(1),
)

-- Easy peasy runtime code
function actor_on_update()
   -- Simple fetching
   printf("Gubbin from MCM: %s", gubbin:get())
   printf("Foo from MCM: %s", foo:get())

   -- The getter method takes an optional function parameter,
   -- which receives the control's MCM path as a list,
   -- and returns a fallback value for cases where
   -- MCM values are unavailable or unset
   printf("Bar from MCM: %s", bar:get(function(path) return 3.141 end))
end

function on_game_start()
   RegisterScriptCallback("actor_on_update", actor_on_update)
end

-- Trivial MCM entrypoint
function on_mcm_load()
   return tree:build()
end
--]]

